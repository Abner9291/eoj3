{% extends 'problem/detail/base.jinja2' %}
{% from 'components/status.jinja2' import status with context %}

{% block css %}
  <link href="/static/node_modules/morris.js/morris.css" rel="stylesheet">
{% endblock %}

{% block problem_content %}

  <table class="ui very padded center aligned celled table">
    <thead>
      <tr>
        <th class="six wide">
          <h4 class="ui header"><i class="user icon"></i> BY AUTHORS</h4>
        </th>
        <th class="six wide">
          <h4 class="ui header"><i class="tag icon"></i> TOTAL</h4>
        </th>
        <th class="four wide">
          <h4 class="ui header">REWARD</h4>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <div class="ui statistic">
            <div class="value">{{ user_ac_count }} / {{ user_all_count }}</div>
            <div class="label">{{ "%.2f %%" | format(user_ratio) }} Accepted</div>
          </div>
        </td>
        <td>
          <div class="ui statistic">
            <div class="value">{{ ac_count }} / {{ all_count }}</div>
            <div class="label">{{ "%.2f %%" | format(ratio) }} Solved</div>
          </div>
        </td>
        <td>
          <div class="ui statistic">
            <div class="value">{{ difficulty | round(1) }}</div>
            <div class="label">Points</div>
          </div>
        </td>
      </tr>
      {% if all_count > 0 %}
      <tr><td colspan="3"><div id="distribution"></div></td></tr>
      {% endif %}
    </tbody>
  </table>

  <div class="ui hidden divider"></div>

  <div style="float: right">
    <div class="ui selection dropdown status-filter" data-filter-type="type" data-value="{{ param_type }}">
      <div class="text">Latest</div>
      <i class="dropdown icon"></i>
      <div class="menu">
        <div class="item">Latest</div>
        <div class="item">Fastest</div>
        <div class="item">Shortest</div>
      </div>
    </div>
  </div>

  <div class="ui header">Submissions (contest included)</div>

  {{ status(hide_problems=True, code_length=True) }}

  <div class="ui right floated buttons">
    <a class="ui green button" href="{{ url('problem:status') }}?problem={{ problem.pk }}&verdict=v0">Accepted</a>
    <div class="or"></div>
    <a class="ui button" href="{{ url('problem:status') }}?problem={{ problem.pk }}">All submissions
      <i class="right chevron icon"></i>
    </a>
  </div>
  <div class="ui hidden divider" style="clear: both;"></div>

  {% if show_sub_growth %}
  <div class="ui header">Accepted Submission Growth</div>
  <div id="accepted-submission-growth"></div>
  {% endif %}

  {% if show_runtime_dist %}
  <div class="ui header">Run time distribution</div>
  <div id="runtime-distribution"></div>
  {% endif %}

{% endblock %}

{% block script %}
  <script src="/static/node_modules/raphael/raphael.min.js"></script>
  <script src="/static/node_modules/morris.js/morris.min.js"></script>
  <script type="text/javascript">
    {% if all_count > 0 %}
    Morris.Donut({
      element: 'distribution',
      data: [
        {label: "Accepted", value: {{ stats.ac }}, color: '#21BA45' },
        {label: "Wrong Answer", value: {{ stats.wa }}, color: '#DB2828' },
        {label: "Time Limit Exceeded", value: {{ stats.tle }}, color: '#F2711C' },
        {label: "Runtime Error", value: {{ stats.re }}, color: '#FBBD08' },
        {label: "Others", value: {{ stats.others }}, color: '#2185D0' }
      ]
    });
    {% endif %}

    {% if show_sub_growth %}
    Morris.Area({
      element: 'accepted-submission-growth',
      data: [
        {% for s in sub_growth %}
        { date: '{{ s.date | date('Y-m') }}', count: '{{ s.count }}' }{% if not loop.last %},{% endif %}
        {% endfor %}
      ],
      hideHover: 'always',
      xkey: 'date',
      ykeys: ['count'],
      lineColors: ['#2185D0'],
      pointFillColors: ['#2185D0'],
      goalLineColors: ['#2075bb'],
      fillOpacity: 0.6,
      lineWidth: 2,
      pointSize: 3
    });
    {% endif %}

    var data = [
      {% for s in runtime_dist %}
      { {% for key, val in s.items() %}"{{ key }}": {{ val }}, {% endfor %} },
      {% endfor %}
    ];

    var ykeys = [{% for lang in runtime_lang_set %}"{{ lang }}",{% endfor %}];
    var barColors = ["#DB2828", "#F2711C", "#FBBD08", "#21BA45", "#2185D0"];

    for (var i = barColors.length - 1; i > 0; i -= 1) {
      var j = Math.floor(Math.random() * (i + 1));
      var temp = barColors[i];
      barColors[i] = barColors[j];
      barColors[j] = temp;
    }

    Morris.Bar({
      element: 'runtime-distribution',
      data: data,
      xkey: 'runtime',
      ykeys: ykeys,
      labels: ykeys,
      gridTextColor: '#898992',
      barColors: barColors,
      stacked: true
    });

  </script>
{% endblock %}